<template>
  <div id="app">
    <b-navbar type="light" variant="light">
      <b-navbar-brand href="#">Forecast UI</b-navbar-brand>
      <b-nav-form>
        <b-form-input class="mr-sm-2" placeholder="Search" v-model="ville" @keyup.enter="valider"></b-form-input>
        <b-nav tabs>
          <b-nav-item @click.prevent="tab = 'hottestdaytab'" :active="tab === 'hottestdaytab'">
            <router-link :to="{name: 'HottestDay', params: {nomville:ville}}">Hottest Day</router-link>
          </b-nav-item>
          <b-nav-item @click.prevent="tab = 'rainydaystab'" :active="tab === 'rainydaystab'">
            <router-link :to="{name: 'RainyDays', params: {nomville:ville}}">Rainy Days</router-link>
          </b-nav-item>
          <b-nav-item
            @click.prevent="tab = 'actualhumiditytab'"
            :active="tab === 'actualhumiditytab'"
          >
            <router-link :to="{name: 'ActualHumidity', params: {nomville:ville}}">Actual Humidity</router-link>
          </b-nav-item>
        </b-nav>
      </b-nav-form>
    </b-navbar>
    <b-container fluid class="mt-3">
      <router-view />
    </b-container>
  </div>
</template>

<script>
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

export default {
  name: 'App',
  data () {
    return {
      ville: '',
      tab: '',
      START: '/',
      trailingSlashRE: /\/?$/
    }
  },
  methods: {
    isObjectEqual (a, b) {
      if (a === void 0) a = {}
      if (b === void 0) b = {}

      // handle null value #1566
      if (!a || !b) {
        return a === b
      }
      var aKeys = Object.keys(a)
      var bKeys = Object.keys(b)
      if (aKeys.length !== bKeys.length) {
        return false
      }
      return aKeys.every(function (key) {
        var aVal = a[key]
        var bVal = b[key]
        // check nested equality
        if (typeof aVal === 'object' && typeof bVal === 'object') {
          return this.isObjectEqual(aVal, bVal)
        }
        return String(aVal) === String(bVal)
      })
    },

    isSameRoute (a, b) {
      if (b === this.START) {
        return a === b
      } else if (!b) {
        return false
      } else if (a.path && b.path) {
        return (
          a.path.replace(this.trailingSlashRE, '') ===
            b.path.replace(this.trailingSlashRE, '') &&
          a.hash === b.hash &&
          this.isObjectEqual(a.query, b.query)
        )
      } else if (a.name && b.name) {
        return (
          a.name === b.name &&
          a.hash === b.hash &&
          this.isObjectEqual(a.query, b.query) &&
          this.isObjectEqual(a.params, b.params)
        )
      } else {
        return false
      }
    },
    valider () {
      let root = '/'
      let tocompare = this.$router.currentRoute.path
      let ishome = this.isSameRoute(tocompare, root)
      console.log('root', root)
      console.log('tocompare', tocompare)
      console.log('issame', !ishome)
      if (this.ville.length > 0 && !ishome) {
        this.$router.push('/')
      }
    }
  }
}
</script>
